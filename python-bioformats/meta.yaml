package:
  name: python-bioformats
  version: "4.0.0"

source:
  fn: python-bioformats-4.0.0.tar.gz
  url: https://files.pythonhosted.org/packages/e2/35/c1d5b33e275c0545083b8cb38213d78f85269a8a3e1859b6b36639e75693/python-bioformats-4.0.0.tar.gz
  md5: 5470817c3033223b5c5471bbed908bd2
#  patches:
   # List any patch files here
   # - fix.patch

# build:
  # noarch_python: True
  # preserve_egg_dir: True
  # entry_points:
    # Put any entry points (scripts to be generated automatically) here. The
    # syntax is module:function.  For example
    #
    # - python-bioformats = python-bioformats:main
    #
    # Would create an entry point called python-bioformats that calls python-bioformats.main()


  # If this is a new build for the same version, increment the build
  # number. If you do not include this key, it defaults to 0.
  # number: 1

requirements:  # there are many more requirements (boto3, botocore, future jmespath, numpy, python-dateutil, python-javabridge, s3transfer, six, urllib3) but we bank on python-bioformats pulling these for us
  build:
    - python
    - setuptools
    - boto3 >=1.14.23
    - future >=0.18.2
    - python-javabridge 4.0.0

  run:
    - python
    - openjdk
    - boto3 >=1.14.23
    - future >=0.18.2
    - python-javabridge 4.0.0

test:
  # Python imports, fine to import javabridge and bioformats w/o the python- in front
  imports:
    - javabridge
    - bioformats

  # commands:
    # You can put test commands to be run here.  Use this to test that the
    # entry points work.


  # You can also put a file called run_test.py in the recipe that will be run
  # at test time.

  # requires:
    # Put any additional test requirements here.  For example
    # - nose

about:
  home: http://github.com/CellProfiler/python-bioformats/
  license: GNU General Public License v2 (GPLv2)
  summary: 'Read and write life sciences file formats'

# See
# http://docs.continuum.io/conda/build.html for
# more information about meta.yaml
